ARM GAS  /tmp/ccBmS00B.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB247:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include<stdbool.h>
  25:Core/Src/main.c **** #include<stdio.h>
  26:Core/Src/main.c **** #include<string.h>
  27:Core/Src/main.c **** #include <time.h>
  28:Core/Src/main.c **** #include <stdlib.h>
  29:Core/Src/main.c **** /* USER CODE END Includes */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/ccBmS00B.s 			page 2


  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** typedef enum{
  34:Core/Src/main.c ****   APP_INIT, APP_WAIT_REQUEST, APP_LISTENING, APP_PAUSE, APP_WARNING, APP_ERROR
  35:Core/Src/main.c **** } App_State;
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END PTD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PD */
  41:Core/Src/main.c **** #define BUFFER_SIZE 30
  42:Core/Src/main.c **** /* USER CODE END PD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  45:Core/Src/main.c **** /* USER CODE BEGIN PM */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE END PM */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  50:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  51:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** UART_HandleTypeDef huart2;
  54:Core/Src/main.c **** DMA_HandleTypeDef hdma_usart2_tx;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* USER CODE BEGIN PV */
  57:Core/Src/main.c **** uint32_t Analog_Hall = 0;
  58:Core/Src/main.c **** uint32_t Digital_Hall = 0;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** uint8_t input_buffer[BUFFER_SIZE] = {0};
  61:Core/Src/main.c **** uint8_t command[BUFFER_SIZE] = {0};
  62:Core/Src/main.c **** uint8_t command_idx = 0;
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** App_State STATE = APP_INIT;
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** bool is_adc_ready = false;
  67:Core/Src/main.c **** 
  68:Core/Src/main.c ****   bool is_raw = false;
  69:Core/Src/main.c ****   bool is_avg = false;
  70:Core/Src/main.c ****   bool is_rnd = false;
  71:Core/Src/main.c **** /* USER CODE END PV */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  74:Core/Src/main.c **** void SystemClock_Config(void);
  75:Core/Src/main.c **** static void MX_GPIO_Init(void);
  76:Core/Src/main.c **** static void MX_DMA_Init(void);
  77:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  78:Core/Src/main.c **** static void MX_ADC1_Init(void);
  79:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  80:Core/Src/main.c **** //void HAL_ADC_ConvCpltCallback();
  81:Core/Src/main.c **** /* USER CODE END PFP */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  84:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** /* USER CODE END 0 */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** /**
ARM GAS  /tmp/ccBmS00B.s 			page 3


  89:Core/Src/main.c ****   * @brief  The application entry point.
  90:Core/Src/main.c ****   * @retval int
  91:Core/Src/main.c ****   */
  92:Core/Src/main.c **** int main(void)
  93:Core/Src/main.c **** {
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  96:Core/Src/main.c ****   STATE = APP_INIT;
  97:Core/Src/main.c ****   //srand(time(NULL));
  98:Core/Src/main.c ****   Analog_Hall = 0;
  99:Core/Src/main.c ****   Digital_Hall = 0;
 100:Core/Src/main.c ****   for(int i=0; i<BUFFER_SIZE; i++) input_buffer[i]=0;
 101:Core/Src/main.c ****   for(int i=0; i<BUFFER_SIZE; i++) command[i]=0;
 102:Core/Src/main.c ****   command_idx = 0;
 103:Core/Src/main.c ****   is_adc_ready = false;
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   /* USER CODE END 1 */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 110:Core/Src/main.c ****   HAL_Init();
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* USER CODE END Init */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* Configure the system clock */
 117:Core/Src/main.c ****   SystemClock_Config();
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* USER CODE END SysInit */
 122:Core/Src/main.c **** 
 123:Core/Src/main.c ****   /* Initialize all configured peripherals */
 124:Core/Src/main.c ****   MX_GPIO_Init();
 125:Core/Src/main.c ****   MX_DMA_Init();
 126:Core/Src/main.c ****   MX_USART2_UART_Init();
 127:Core/Src/main.c ****   MX_ADC1_Init();
 128:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 129:Core/Src/main.c ****   STATE = APP_WAIT_REQUEST;
 130:Core/Src/main.c ****   if(HAL_UARTEx_ReceiveToIdle_IT(&huart2,input_buffer,sizeof(input_buffer))!=HAL_OK)
 131:Core/Src/main.c ****   {
 132:Core/Src/main.c ****     STATE = APP_ERROR;
 133:Core/Src/main.c ****   }
 134:Core/Src/main.c ****   /* USER CODE END 2 */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   /* Infinite loop */
 137:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 138:Core/Src/main.c ****   while (1)
 139:Core/Src/main.c ****   {
 140:Core/Src/main.c ****    //molto momentaneo
 141:Core/Src/main.c ****     if(huart2.RxState == HAL_UART_STATE_READY){
 142:Core/Src/main.c ****       STATE = APP_LISTENING;
 143:Core/Src/main.c ****     }
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****     switch (STATE)
ARM GAS  /tmp/ccBmS00B.s 			page 4


 146:Core/Src/main.c ****     {
 147:Core/Src/main.c ****     case APP_INIT:
 148:Core/Src/main.c ****       /* in theory it should never go here */
 149:Core/Src/main.c ****       break;
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****     case APP_WAIT_REQUEST:
 152:Core/Src/main.c ****       break;
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****     case APP_LISTENING:
 155:Core/Src/main.c ****     HAL_ADC_Start_DMA(&hadc1, &Analog_Hall, 1);
 156:Core/Src/main.c ****     //READ DIGITAL
 157:Core/Src/main.c ****     //APPLY FILTER
 158:Core/Src/main.c ****     //SEND RESULTS
 159:Core/Src/main.c ****     while(!is_adc_ready);
 160:Core/Src/main.c ****     char buf[50] = {0};
 161:Core/Src/main.c ****     snprintf(buf,50,"%lu\t%lu\n",Analog_Hall,Digital_Hall);
 162:Core/Src/main.c ****     HAL_Delay(50);
 163:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,buf,strlen(buf),20);
 164:Core/Src/main.c ****     is_adc_ready = false;
 165:Core/Src/main.c ****       break;
 166:Core/Src/main.c ****     
 167:Core/Src/main.c ****     case APP_PAUSE:
 168:Core/Src/main.c ****       break;
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****     case APP_WARNING:
 171:Core/Src/main.c ****       break;
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****     case APP_ERROR:
 174:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,"WARNING\r\n",10,30);
 175:Core/Src/main.c ****       break;
 176:Core/Src/main.c ****     
 177:Core/Src/main.c ****     default:
 178:Core/Src/main.c ****       break;
 179:Core/Src/main.c ****     }
 180:Core/Src/main.c ****     /* USER CODE END WHILE */
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 183:Core/Src/main.c ****     
 184:Core/Src/main.c ****   }
 185:Core/Src/main.c ****   /* USER CODE END 3 */
 186:Core/Src/main.c **** }
 187:Core/Src/main.c **** 
 188:Core/Src/main.c **** /**
 189:Core/Src/main.c ****   * @brief System Clock Configuration
 190:Core/Src/main.c ****   * @retval None
 191:Core/Src/main.c ****   */
 192:Core/Src/main.c **** void SystemClock_Config(void)
 193:Core/Src/main.c **** {
 194:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 195:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 198:Core/Src/main.c ****   */
 199:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 200:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
ARM GAS  /tmp/ccBmS00B.s 			page 5


 203:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 204:Core/Src/main.c ****   */
 205:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 206:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 207:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 208:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 210:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 215:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 216:Core/Src/main.c ****   {
 217:Core/Src/main.c ****     Error_Handler();
 218:Core/Src/main.c ****   }
 219:Core/Src/main.c **** 
 220:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 221:Core/Src/main.c ****   */
 222:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 223:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 224:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 225:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 226:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 227:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 230:Core/Src/main.c ****   {
 231:Core/Src/main.c ****     Error_Handler();
 232:Core/Src/main.c ****   }
 233:Core/Src/main.c **** }
 234:Core/Src/main.c **** 
 235:Core/Src/main.c **** /**
 236:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 237:Core/Src/main.c ****   * @param None
 238:Core/Src/main.c ****   * @retval None
 239:Core/Src/main.c ****   */
 240:Core/Src/main.c **** static void MX_ADC1_Init(void)
 241:Core/Src/main.c **** {
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 254:Core/Src/main.c ****   */
 255:Core/Src/main.c ****   hadc1.Instance = ADC1;
 256:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 257:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 258:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 259:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
ARM GAS  /tmp/ccBmS00B.s 			page 6


 260:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 261:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 262:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 263:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 264:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 265:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 266:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 267:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 268:Core/Src/main.c ****   {
 269:Core/Src/main.c ****     Error_Handler();
 270:Core/Src/main.c ****   }
 271:Core/Src/main.c **** 
 272:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 273:Core/Src/main.c ****   */
 274:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_6;
 275:Core/Src/main.c ****   sConfig.Rank = 1;
 276:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 277:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 278:Core/Src/main.c ****   {
 279:Core/Src/main.c ****     Error_Handler();
 280:Core/Src/main.c ****   }
 281:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 284:Core/Src/main.c **** 
 285:Core/Src/main.c **** }
 286:Core/Src/main.c **** 
 287:Core/Src/main.c **** /**
 288:Core/Src/main.c ****   * @brief USART2 Initialization Function
 289:Core/Src/main.c ****   * @param None
 290:Core/Src/main.c ****   * @retval None
 291:Core/Src/main.c ****   */
 292:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 293:Core/Src/main.c **** {
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 302:Core/Src/main.c ****   huart2.Instance = USART2;
 303:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 304:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 305:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 306:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 307:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 308:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 309:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 310:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 311:Core/Src/main.c ****   {
 312:Core/Src/main.c ****     Error_Handler();
 313:Core/Src/main.c ****   }
 314:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 315:Core/Src/main.c **** 
 316:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
ARM GAS  /tmp/ccBmS00B.s 			page 7


 317:Core/Src/main.c **** 
 318:Core/Src/main.c **** }
 319:Core/Src/main.c **** 
 320:Core/Src/main.c **** /**
 321:Core/Src/main.c ****   * Enable DMA controller clock
 322:Core/Src/main.c ****   */
 323:Core/Src/main.c **** static void MX_DMA_Init(void)
 324:Core/Src/main.c **** {
 325:Core/Src/main.c **** 
 326:Core/Src/main.c ****   /* DMA controller clock enable */
 327:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 328:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 329:Core/Src/main.c **** 
 330:Core/Src/main.c ****   /* DMA interrupt init */
 331:Core/Src/main.c ****   /* DMA1_Stream6_IRQn interrupt configuration */
 332:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 333:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 334:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 335:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 336:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 337:Core/Src/main.c **** 
 338:Core/Src/main.c **** }
 339:Core/Src/main.c **** 
 340:Core/Src/main.c **** /**
 341:Core/Src/main.c ****   * @brief GPIO Initialization Function
 342:Core/Src/main.c ****   * @param None
 343:Core/Src/main.c ****   * @retval None
 344:Core/Src/main.c ****   */
 345:Core/Src/main.c **** static void MX_GPIO_Init(void)
 346:Core/Src/main.c **** {
  28              		.loc 1 346 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  37 0002 8BB0     		sub	sp, sp, #44
  38              		.cfi_def_cfa_offset 56
 347:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 347 3 view .LVU1
  40              		.loc 1 347 20 is_stmt 0 view .LVU2
  41 0004 0024     		movs	r4, #0
  42 0006 0594     		str	r4, [sp, #20]
  43 0008 0694     		str	r4, [sp, #24]
  44 000a 0794     		str	r4, [sp, #28]
  45 000c 0894     		str	r4, [sp, #32]
  46 000e 0994     		str	r4, [sp, #36]
 348:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 349:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 350:Core/Src/main.c **** 
 351:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 352:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  47              		.loc 1 352 3 is_stmt 1 view .LVU3
  48              	.LBB4:
ARM GAS  /tmp/ccBmS00B.s 			page 8


  49              		.loc 1 352 3 view .LVU4
  50 0010 0194     		str	r4, [sp, #4]
  51              		.loc 1 352 3 view .LVU5
  52 0012 2F4B     		ldr	r3, .L3
  53 0014 1A6B     		ldr	r2, [r3, #48]
  54 0016 42F00402 		orr	r2, r2, #4
  55 001a 1A63     		str	r2, [r3, #48]
  56              		.loc 1 352 3 view .LVU6
  57 001c 1A6B     		ldr	r2, [r3, #48]
  58 001e 02F00402 		and	r2, r2, #4
  59 0022 0192     		str	r2, [sp, #4]
  60              		.loc 1 352 3 view .LVU7
  61 0024 019A     		ldr	r2, [sp, #4]
  62              	.LBE4:
  63              		.loc 1 352 3 view .LVU8
 353:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  64              		.loc 1 353 3 view .LVU9
  65              	.LBB5:
  66              		.loc 1 353 3 view .LVU10
  67 0026 0294     		str	r4, [sp, #8]
  68              		.loc 1 353 3 view .LVU11
  69 0028 1A6B     		ldr	r2, [r3, #48]
  70 002a 42F08002 		orr	r2, r2, #128
  71 002e 1A63     		str	r2, [r3, #48]
  72              		.loc 1 353 3 view .LVU12
  73 0030 1A6B     		ldr	r2, [r3, #48]
  74 0032 02F08002 		and	r2, r2, #128
  75 0036 0292     		str	r2, [sp, #8]
  76              		.loc 1 353 3 view .LVU13
  77 0038 029A     		ldr	r2, [sp, #8]
  78              	.LBE5:
  79              		.loc 1 353 3 view .LVU14
 354:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  80              		.loc 1 354 3 view .LVU15
  81              	.LBB6:
  82              		.loc 1 354 3 view .LVU16
  83 003a 0394     		str	r4, [sp, #12]
  84              		.loc 1 354 3 view .LVU17
  85 003c 1A6B     		ldr	r2, [r3, #48]
  86 003e 42F00102 		orr	r2, r2, #1
  87 0042 1A63     		str	r2, [r3, #48]
  88              		.loc 1 354 3 view .LVU18
  89 0044 1A6B     		ldr	r2, [r3, #48]
  90 0046 02F00102 		and	r2, r2, #1
  91 004a 0392     		str	r2, [sp, #12]
  92              		.loc 1 354 3 view .LVU19
  93 004c 039A     		ldr	r2, [sp, #12]
  94              	.LBE6:
  95              		.loc 1 354 3 view .LVU20
 355:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  96              		.loc 1 355 3 view .LVU21
  97              	.LBB7:
  98              		.loc 1 355 3 view .LVU22
  99 004e 0494     		str	r4, [sp, #16]
 100              		.loc 1 355 3 view .LVU23
 101 0050 1A6B     		ldr	r2, [r3, #48]
 102 0052 42F00202 		orr	r2, r2, #2
ARM GAS  /tmp/ccBmS00B.s 			page 9


 103 0056 1A63     		str	r2, [r3, #48]
 104              		.loc 1 355 3 view .LVU24
 105 0058 1B6B     		ldr	r3, [r3, #48]
 106 005a 03F00203 		and	r3, r3, #2
 107 005e 0493     		str	r3, [sp, #16]
 108              		.loc 1 355 3 view .LVU25
 109 0060 049B     		ldr	r3, [sp, #16]
 110              	.LBE7:
 111              		.loc 1 355 3 view .LVU26
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 358:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 112              		.loc 1 358 3 view .LVU27
 113 0062 1C4D     		ldr	r5, .L3+4
 114 0064 2246     		mov	r2, r4
 115 0066 2021     		movs	r1, #32
 116 0068 2846     		mov	r0, r5
 117 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 118              	.LVL0:
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 361:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 119              		.loc 1 361 3 view .LVU28
 120              		.loc 1 361 23 is_stmt 0 view .LVU29
 121 006e 4FF40053 		mov	r3, #8192
 122 0072 0593     		str	r3, [sp, #20]
 362:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 123              		.loc 1 362 3 is_stmt 1 view .LVU30
 124              		.loc 1 362 24 is_stmt 0 view .LVU31
 125 0074 4FF40413 		mov	r3, #2162688
 126 0078 0693     		str	r3, [sp, #24]
 363:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 127              		.loc 1 363 3 is_stmt 1 view .LVU32
 128              		.loc 1 363 24 is_stmt 0 view .LVU33
 129 007a 0794     		str	r4, [sp, #28]
 364:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 130              		.loc 1 364 3 is_stmt 1 view .LVU34
 131 007c 05A9     		add	r1, sp, #20
 132 007e 1648     		ldr	r0, .L3+8
 133 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 134              	.LVL1:
 365:Core/Src/main.c **** 
 366:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 367:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 135              		.loc 1 367 3 view .LVU35
 136              		.loc 1 367 23 is_stmt 0 view .LVU36
 137 0084 2023     		movs	r3, #32
 138 0086 0593     		str	r3, [sp, #20]
 368:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 139              		.loc 1 368 3 is_stmt 1 view .LVU37
 140              		.loc 1 368 24 is_stmt 0 view .LVU38
 141 0088 0123     		movs	r3, #1
 142 008a 0693     		str	r3, [sp, #24]
 369:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 143              		.loc 1 369 3 is_stmt 1 view .LVU39
 144              		.loc 1 369 24 is_stmt 0 view .LVU40
 145 008c 0794     		str	r4, [sp, #28]
ARM GAS  /tmp/ccBmS00B.s 			page 10


 370:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 146              		.loc 1 370 3 is_stmt 1 view .LVU41
 147              		.loc 1 370 25 is_stmt 0 view .LVU42
 148 008e 0894     		str	r4, [sp, #32]
 371:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 149              		.loc 1 371 3 is_stmt 1 view .LVU43
 150 0090 05A9     		add	r1, sp, #20
 151 0092 2846     		mov	r0, r5
 152 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 153              	.LVL2:
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /*Configure GPIO pin : PA7 */
 374:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_7;
 154              		.loc 1 374 3 view .LVU44
 155              		.loc 1 374 23 is_stmt 0 view .LVU45
 156 0098 8023     		movs	r3, #128
 157 009a 0593     		str	r3, [sp, #20]
 375:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 158              		.loc 1 375 3 is_stmt 1 view .LVU46
 159              		.loc 1 375 24 is_stmt 0 view .LVU47
 160 009c 4FF44413 		mov	r3, #3211264
 161 00a0 0693     		str	r3, [sp, #24]
 376:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 162              		.loc 1 376 3 is_stmt 1 view .LVU48
 163              		.loc 1 376 24 is_stmt 0 view .LVU49
 164 00a2 0794     		str	r4, [sp, #28]
 377:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 165              		.loc 1 377 3 is_stmt 1 view .LVU50
 166 00a4 05A9     		add	r1, sp, #20
 167 00a6 2846     		mov	r0, r5
 168 00a8 FFF7FEFF 		bl	HAL_GPIO_Init
 169              	.LVL3:
 378:Core/Src/main.c **** 
 379:Core/Src/main.c ****   /* EXTI interrupt init*/
 380:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 170              		.loc 1 380 3 view .LVU51
 171 00ac 2246     		mov	r2, r4
 172 00ae 2146     		mov	r1, r4
 173 00b0 1720     		movs	r0, #23
 174 00b2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 175              	.LVL4:
 381:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 176              		.loc 1 381 3 view .LVU52
 177 00b6 1720     		movs	r0, #23
 178 00b8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 179              	.LVL5:
 382:Core/Src/main.c **** 
 383:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 180              		.loc 1 383 3 view .LVU53
 181 00bc 2246     		mov	r2, r4
 182 00be 2146     		mov	r1, r4
 183 00c0 2820     		movs	r0, #40
 184 00c2 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 185              	.LVL6:
 384:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 186              		.loc 1 384 3 view .LVU54
 187 00c6 2820     		movs	r0, #40
ARM GAS  /tmp/ccBmS00B.s 			page 11


 188 00c8 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 189              	.LVL7:
 385:Core/Src/main.c **** 
 386:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 387:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 388:Core/Src/main.c **** }
 190              		.loc 1 388 1 is_stmt 0 view .LVU55
 191 00cc 0BB0     		add	sp, sp, #44
 192              		.cfi_def_cfa_offset 12
 193              		@ sp needed
 194 00ce 30BD     		pop	{r4, r5, pc}
 195              	.L4:
 196              		.align	2
 197              	.L3:
 198 00d0 00380240 		.word	1073887232
 199 00d4 00000240 		.word	1073872896
 200 00d8 00080240 		.word	1073874944
 201              		.cfi_endproc
 202              	.LFE247:
 204              		.section	.text.MX_DMA_Init,"ax",%progbits
 205              		.align	1
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 210              	MX_DMA_Init:
 211              	.LFB246:
 324:Core/Src/main.c **** 
 212              		.loc 1 324 1 is_stmt 1 view -0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 8
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216 0000 10B5     		push	{r4, lr}
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 4, -8
 219              		.cfi_offset 14, -4
 220 0002 82B0     		sub	sp, sp, #8
 221              		.cfi_def_cfa_offset 16
 327:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 222              		.loc 1 327 3 view .LVU57
 223              	.LBB8:
 327:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 224              		.loc 1 327 3 view .LVU58
 225 0004 0024     		movs	r4, #0
 226 0006 0094     		str	r4, [sp]
 327:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 227              		.loc 1 327 3 view .LVU59
 228 0008 124B     		ldr	r3, .L7
 229 000a 1A6B     		ldr	r2, [r3, #48]
 230 000c 42F48002 		orr	r2, r2, #4194304
 231 0010 1A63     		str	r2, [r3, #48]
 327:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 232              		.loc 1 327 3 view .LVU60
 233 0012 1A6B     		ldr	r2, [r3, #48]
 234 0014 02F48002 		and	r2, r2, #4194304
 235 0018 0092     		str	r2, [sp]
 327:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 236              		.loc 1 327 3 view .LVU61
ARM GAS  /tmp/ccBmS00B.s 			page 12


 237 001a 009A     		ldr	r2, [sp]
 238              	.LBE8:
 327:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 239              		.loc 1 327 3 view .LVU62
 328:Core/Src/main.c **** 
 240              		.loc 1 328 3 view .LVU63
 241              	.LBB9:
 328:Core/Src/main.c **** 
 242              		.loc 1 328 3 view .LVU64
 243 001c 0194     		str	r4, [sp, #4]
 328:Core/Src/main.c **** 
 244              		.loc 1 328 3 view .LVU65
 245 001e 1A6B     		ldr	r2, [r3, #48]
 246 0020 42F40012 		orr	r2, r2, #2097152
 247 0024 1A63     		str	r2, [r3, #48]
 328:Core/Src/main.c **** 
 248              		.loc 1 328 3 view .LVU66
 249 0026 1B6B     		ldr	r3, [r3, #48]
 250 0028 03F40013 		and	r3, r3, #2097152
 251 002c 0193     		str	r3, [sp, #4]
 328:Core/Src/main.c **** 
 252              		.loc 1 328 3 view .LVU67
 253 002e 019B     		ldr	r3, [sp, #4]
 254              	.LBE9:
 328:Core/Src/main.c **** 
 255              		.loc 1 328 3 view .LVU68
 332:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 256              		.loc 1 332 3 view .LVU69
 257 0030 2246     		mov	r2, r4
 258 0032 2146     		mov	r1, r4
 259 0034 1120     		movs	r0, #17
 260 0036 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 261              	.LVL8:
 333:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 262              		.loc 1 333 3 view .LVU70
 263 003a 1120     		movs	r0, #17
 264 003c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 265              	.LVL9:
 335:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 266              		.loc 1 335 3 view .LVU71
 267 0040 2246     		mov	r2, r4
 268 0042 2146     		mov	r1, r4
 269 0044 3820     		movs	r0, #56
 270 0046 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 271              	.LVL10:
 336:Core/Src/main.c **** 
 272              		.loc 1 336 3 view .LVU72
 273 004a 3820     		movs	r0, #56
 274 004c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 275              	.LVL11:
 338:Core/Src/main.c **** 
 276              		.loc 1 338 1 is_stmt 0 view .LVU73
 277 0050 02B0     		add	sp, sp, #8
 278              		.cfi_def_cfa_offset 8
 279              		@ sp needed
 280 0052 10BD     		pop	{r4, pc}
 281              	.L8:
ARM GAS  /tmp/ccBmS00B.s 			page 13


 282              		.align	2
 283              	.L7:
 284 0054 00380240 		.word	1073887232
 285              		.cfi_endproc
 286              	.LFE246:
 288              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 289              		.align	1
 290              		.global	HAL_ADC_ConvCpltCallback
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 295              	HAL_ADC_ConvCpltCallback:
 296              	.LVL12:
 297              	.LFB248:
 389:Core/Src/main.c **** 
 390:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 391:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 298              		.loc 1 391 55 is_stmt 1 view -0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302              		@ link register save eliminated.
 392:Core/Src/main.c ****   is_adc_ready = true;
 303              		.loc 1 392 3 view .LVU75
 304              		.loc 1 392 16 is_stmt 0 view .LVU76
 305 0000 014B     		ldr	r3, .L10
 306 0002 0122     		movs	r2, #1
 307 0004 1A70     		strb	r2, [r3]
 393:Core/Src/main.c **** }
 308              		.loc 1 393 1 view .LVU77
 309 0006 7047     		bx	lr
 310              	.L11:
 311              		.align	2
 312              	.L10:
 313 0008 00000000 		.word	is_adc_ready
 314              		.cfi_endproc
 315              	.LFE248:
 317              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 318              		.align	1
 319              		.global	HAL_GPIO_EXTI_Callback
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 324              	HAL_GPIO_EXTI_Callback:
 325              	.LVL13:
 326              	.LFB249:
 394:Core/Src/main.c **** 
 395:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin){
 327              		.loc 1 395 48 is_stmt 1 view -0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 396:Core/Src/main.c ****   if(GPIO_Pin == GPIO_PIN_7){
 331              		.loc 1 396 3 view .LVU79
 332              		.loc 1 396 5 is_stmt 0 view .LVU80
 333 0000 8028     		cmp	r0, #128
 334 0002 00D0     		beq	.L18
ARM GAS  /tmp/ccBmS00B.s 			page 14


 335 0004 7047     		bx	lr
 336              	.L18:
 395:Core/Src/main.c ****   if(GPIO_Pin == GPIO_PIN_7){
 337              		.loc 1 395 48 view .LVU81
 338 0006 08B5     		push	{r3, lr}
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 3, -8
 341              		.cfi_offset 14, -4
 397:Core/Src/main.c ****     Digital_Hall = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7) == GPIO_PIN_RESET ? 0 : 1;
 342              		.loc 1 397 5 is_stmt 1 view .LVU82
 343              		.loc 1 397 20 is_stmt 0 view .LVU83
 344 0008 8021     		movs	r1, #128
 345 000a 0448     		ldr	r0, .L19
 346              	.LVL14:
 347              		.loc 1 397 20 view .LVU84
 348 000c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 349              	.LVL15:
 350              		.loc 1 397 77 discriminator 1 view .LVU85
 351 0010 0038     		subs	r0, r0, #0
 352 0012 18BF     		it	ne
 353 0014 0120     		movne	r0, #1
 354              		.loc 1 397 18 discriminator 1 view .LVU86
 355 0016 024B     		ldr	r3, .L19+4
 356 0018 1860     		str	r0, [r3]
 398:Core/Src/main.c ****   }
 399:Core/Src/main.c ****   //HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 400:Core/Src/main.c ****   //Digital_Hall = Digital_Hall==1 ? 0 : 1;
 401:Core/Src/main.c ****   
 402:Core/Src/main.c **** }
 357              		.loc 1 402 1 view .LVU87
 358 001a 08BD     		pop	{r3, pc}
 359              	.L20:
 360              		.align	2
 361              	.L19:
 362 001c 00000240 		.word	1073872896
 363 0020 00000000 		.word	Digital_Hall
 364              		.cfi_endproc
 365              	.LFE249:
 367              		.section	.rodata.HAL_UARTEx_RxEventCallback.str1.4,"aMS",%progbits,1
 368              		.align	2
 369              	.LC0:
 370 0000 72617700 		.ascii	"raw\000"
 371              		.align	2
 372              	.LC1:
 373 0004 6D6F7669 		.ascii	"moving average\000"
 373      6E672061 
 373      76657261 
 373      676500
 374 0013 00       		.align	2
 375              	.LC2:
 376 0014 72616E64 		.ascii	"random noise\000"
 376      6F6D206E 
 376      6F697365 
 376      00
 377              		.section	.text.HAL_UARTEx_RxEventCallback,"ax",%progbits
 378              		.align	1
 379              		.global	HAL_UARTEx_RxEventCallback
ARM GAS  /tmp/ccBmS00B.s 			page 15


 380              		.syntax unified
 381              		.thumb
 382              		.thumb_func
 384              	HAL_UARTEx_RxEventCallback:
 385              	.LVL16:
 386              	.LFB250:
 403:Core/Src/main.c **** 
 404:Core/Src/main.c **** //
 405:Core/Src/main.c **** // used for serial input from terminal
 406:Core/Src/main.c **** void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 387              		.loc 1 406 74 is_stmt 1 view -0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 0
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 407:Core/Src/main.c ****   if(huart->Instance != USART2) return;
 391              		.loc 1 407 3 view .LVU89
 392              		.loc 1 407 11 is_stmt 0 view .LVU90
 393 0000 0268     		ldr	r2, [r0]
 394              		.loc 1 407 5 view .LVU91
 395 0002 2F4B     		ldr	r3, .L41
 396 0004 9A42     		cmp	r2, r3
 397 0006 00D0     		beq	.L39
 398 0008 7047     		bx	lr
 399              	.L39:
 406:Core/Src/main.c ****   if(huart->Instance != USART2) return;
 400              		.loc 1 406 74 view .LVU92
 401 000a 10B5     		push	{r4, lr}
 402              		.cfi_def_cfa_offset 8
 403              		.cfi_offset 4, -8
 404              		.cfi_offset 14, -4
 405 000c 0446     		mov	r4, r0
 406              	.LBB10:
 408:Core/Src/main.c **** 
 409:Core/Src/main.c ****   bool has_ended = false;
 410:Core/Src/main.c **** 
 411:Core/Src/main.c ****   for(int i=0; i<Size; i++){
 407              		.loc 1 411 11 view .LVU93
 408 000e 4FF0000C 		mov	ip, #0
 409 0012 34E0     		b	.L23
 410              	.LVL17:
 411              	.L25:
 412              	.LBB11:
 413              	.LBB12:
 412:Core/Src/main.c ****     uint8_t ch = input_buffer[i];
 413:Core/Src/main.c **** 
 414:Core/Src/main.c ****     if(ch == '\0' || ch == '\n' || ch == '\r' || command_idx == BUFFER_SIZE-1){ // accept command
 415:Core/Src/main.c **** 
 416:Core/Src/main.c ****       bool is_bad = false;
 414              		.loc 1 416 7 is_stmt 1 view .LVU94
 417:Core/Src/main.c ****       command[command_idx] = '\0';
 415              		.loc 1 417 7 view .LVU95
 416              		.loc 1 417 14 is_stmt 0 view .LVU96
 417 0014 2B4B     		ldr	r3, .L41+4
 418 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 419              		.loc 1 417 28 view .LVU97
 420 0018 2B49     		ldr	r1, .L41+8
 421              	.LVL18:
ARM GAS  /tmp/ccBmS00B.s 			page 16


 422              		.loc 1 417 28 view .LVU98
 423 001a 0022     		movs	r2, #0
 424              	.LVL19:
 425              		.loc 1 417 28 view .LVU99
 426 001c CA54     		strb	r2, [r1, r3]
 418:Core/Src/main.c ****       if(strncmp("raw",command,4) == 0){
 427              		.loc 1 418 7 is_stmt 1 view .LVU100
 428              		.loc 1 418 10 is_stmt 0 view .LVU101
 429 001e 2B48     		ldr	r0, .L41+12
 430 0020 FFF7FEFF 		bl	strcmp
 431              	.LVL20:
 432              		.loc 1 418 9 discriminator 1 view .LVU102
 433 0024 68B9     		cbnz	r0, .L27
 419:Core/Src/main.c ****         //1
 420:Core/Src/main.c ****         is_raw = true;
 434              		.loc 1 420 9 is_stmt 1 view .LVU103
 435              		.loc 1 420 16 is_stmt 0 view .LVU104
 436 0026 2A4B     		ldr	r3, .L41+16
 437 0028 0122     		movs	r2, #1
 438 002a 1A70     		strb	r2, [r3]
 416:Core/Src/main.c ****       command[command_idx] = '\0';
 439              		.loc 1 416 12 view .LVU105
 440 002c 0021     		movs	r1, #0
 441              	.L28:
 442              	.LVL21:
 421:Core/Src/main.c **** 
 422:Core/Src/main.c ****       } else if(strncmp("moving average",command,15) == 0){
 423:Core/Src/main.c ****         //2
 424:Core/Src/main.c ****         is_avg = true;
 425:Core/Src/main.c **** 
 426:Core/Src/main.c ****       } else if(strncmp("random noise",command,13) == 0){
 427:Core/Src/main.c ****         //3
 428:Core/Src/main.c ****         is_rnd = true;
 429:Core/Src/main.c **** 
 430:Core/Src/main.c ****       } else {
 431:Core/Src/main.c ****         is_bad = true;
 432:Core/Src/main.c ****       }
 433:Core/Src/main.c ****       command_idx = 0;
 443              		.loc 1 433 7 is_stmt 1 view .LVU106
 444              		.loc 1 433 19 is_stmt 0 view .LVU107
 445 002e 254B     		ldr	r3, .L41+4
 446 0030 0022     		movs	r2, #0
 447 0032 1A70     		strb	r2, [r3]
 434:Core/Src/main.c ****       //for(int i=0; i<BUFFER_SIZE; i++) command[i]=0;
 435:Core/Src/main.c ****       if(!is_bad) has_ended = true;
 448              		.loc 1 435 7 is_stmt 1 view .LVU108
 449              		.loc 1 435 9 is_stmt 0 view .LVU109
 450 0034 21B1     		cbz	r1, .L21
 451              	.LVL22:
 452              	.L30:
 453              		.loc 1 435 9 view .LVU110
 454              	.LBE12:
 455              	.LBE11:
 456              	.LBE10:
 436:Core/Src/main.c ****       break;
 437:Core/Src/main.c **** 
 438:Core/Src/main.c ****     } else if(ch == 127){ // see if input is DELETE
ARM GAS  /tmp/ccBmS00B.s 			page 17


 439:Core/Src/main.c ****       command_idx = command_idx>1 ? command_idx-1 : 0;
 440:Core/Src/main.c **** 
 441:Core/Src/main.c ****     } else if(ch > 31 && ch < 127){ // printable char, so copy it 
 442:Core/Src/main.c ****       command[command_idx] = ch;
 443:Core/Src/main.c ****       command_idx++;
 444:Core/Src/main.c ****     } // else ignore
 445:Core/Src/main.c ****   }
 446:Core/Src/main.c **** 
 447:Core/Src/main.c ****   if(!has_ended){
 448:Core/Src/main.c ****     HAL_UARTEx_ReceiveToIdle_IT(huart, input_buffer,BUFFER_SIZE);
 457              		.loc 1 448 5 is_stmt 1 view .LVU111
 458 0036 1E22     		movs	r2, #30
 459 0038 2649     		ldr	r1, .L41+20
 460 003a 2046     		mov	r0, r4
 461 003c FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 462              	.LVL23:
 463              	.L21:
 449:Core/Src/main.c ****   }
 450:Core/Src/main.c **** }
 464              		.loc 1 450 1 is_stmt 0 view .LVU112
 465 0040 10BD     		pop	{r4, pc}
 466              	.LVL24:
 467              	.L27:
 468              	.LBB16:
 469              	.LBB14:
 470              	.LBB13:
 422:Core/Src/main.c ****         //2
 471              		.loc 1 422 14 is_stmt 1 view .LVU113
 422:Core/Src/main.c ****         //2
 472              		.loc 1 422 17 is_stmt 0 view .LVU114
 473 0042 2149     		ldr	r1, .L41+8
 474 0044 2448     		ldr	r0, .L41+24
 475 0046 FFF7FEFF 		bl	strcmp
 476              	.LVL25:
 422:Core/Src/main.c ****         //2
 477              		.loc 1 422 16 discriminator 1 view .LVU115
 478 004a 20B9     		cbnz	r0, .L29
 424:Core/Src/main.c **** 
 479              		.loc 1 424 9 is_stmt 1 view .LVU116
 424:Core/Src/main.c **** 
 480              		.loc 1 424 16 is_stmt 0 view .LVU117
 481 004c 234B     		ldr	r3, .L41+28
 482 004e 0122     		movs	r2, #1
 483 0050 1A70     		strb	r2, [r3]
 416:Core/Src/main.c ****       command[command_idx] = '\0';
 484              		.loc 1 416 12 view .LVU118
 485 0052 0021     		movs	r1, #0
 486 0054 EBE7     		b	.L28
 487              	.L29:
 426:Core/Src/main.c ****         //3
 488              		.loc 1 426 14 is_stmt 1 view .LVU119
 426:Core/Src/main.c ****         //3
 489              		.loc 1 426 17 is_stmt 0 view .LVU120
 490 0056 1C49     		ldr	r1, .L41+8
 491 0058 2148     		ldr	r0, .L41+32
 492 005a FFF7FEFF 		bl	strcmp
 493              	.LVL26:
ARM GAS  /tmp/ccBmS00B.s 			page 18


 426:Core/Src/main.c ****         //3
 494              		.loc 1 426 16 discriminator 1 view .LVU121
 495 005e 20B9     		cbnz	r0, .L34
 428:Core/Src/main.c **** 
 496              		.loc 1 428 9 is_stmt 1 view .LVU122
 428:Core/Src/main.c **** 
 497              		.loc 1 428 16 is_stmt 0 view .LVU123
 498 0060 204B     		ldr	r3, .L41+36
 499 0062 0122     		movs	r2, #1
 500 0064 1A70     		strb	r2, [r3]
 416:Core/Src/main.c ****       command[command_idx] = '\0';
 501              		.loc 1 416 12 view .LVU124
 502 0066 0021     		movs	r1, #0
 503 0068 E1E7     		b	.L28
 504              	.L34:
 431:Core/Src/main.c ****       }
 505              		.loc 1 431 16 view .LVU125
 506 006a 0121     		movs	r1, #1
 507 006c DFE7     		b	.L28
 508              	.LVL27:
 509              	.L40:
 431:Core/Src/main.c ****       }
 510              		.loc 1 431 16 view .LVU126
 511              	.LBE13:
 439:Core/Src/main.c **** 
 512              		.loc 1 439 7 is_stmt 1 view .LVU127
 439:Core/Src/main.c **** 
 513              		.loc 1 439 19 is_stmt 0 view .LVU128
 514 006e 012B     		cmp	r3, #1
 515 0070 38BF     		it	cc
 516 0072 0123     		movcc	r3, #1
 517 0074 013B     		subs	r3, r3, #1
 518 0076 134A     		ldr	r2, .L41+4
 519              	.LVL28:
 439:Core/Src/main.c **** 
 520              		.loc 1 439 19 view .LVU129
 521 0078 1370     		strb	r3, [r2]
 522              	.L32:
 523              	.LBE14:
 411:Core/Src/main.c ****     uint8_t ch = input_buffer[i];
 524              		.loc 1 411 25 is_stmt 1 discriminator 2 view .LVU130
 525 007a 0CF1010C 		add	ip, ip, #1
 526              	.LVL29:
 527              	.L23:
 411:Core/Src/main.c ****     uint8_t ch = input_buffer[i];
 528              		.loc 1 411 17 discriminator 1 view .LVU131
 529 007e 6145     		cmp	r1, ip
 530 0080 D9DD     		ble	.L30
 531              	.LBB15:
 412:Core/Src/main.c **** 
 532              		.loc 1 412 5 view .LVU132
 412:Core/Src/main.c **** 
 533              		.loc 1 412 13 is_stmt 0 view .LVU133
 534 0082 144B     		ldr	r3, .L41+20
 535 0084 13F80C20 		ldrb	r2, [r3, ip]	@ zero_extendqisi2
 536              	.LVL30:
 414:Core/Src/main.c **** 
ARM GAS  /tmp/ccBmS00B.s 			page 19


 537              		.loc 1 414 5 is_stmt 1 view .LVU134
 538 0088 0D2A     		cmp	r2, #13
 539 008a 05D8     		bhi	.L24
 540 008c 42F20143 		movw	r3, #9217
 541 0090 D340     		lsrs	r3, r3, r2
 542 0092 13F0010F 		tst	r3, #1
 543 0096 BDD1     		bne	.L25
 544              	.L24:
 414:Core/Src/main.c **** 
 545              		.loc 1 414 62 is_stmt 0 discriminator 3 view .LVU135
 546 0098 0A4B     		ldr	r3, .L41+4
 547 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 414:Core/Src/main.c **** 
 548              		.loc 1 414 47 discriminator 3 view .LVU136
 549 009c 1D2B     		cmp	r3, #29
 550 009e B9D0     		beq	.L25
 438:Core/Src/main.c ****       command_idx = command_idx>1 ? command_idx-1 : 0;
 551              		.loc 1 438 12 is_stmt 1 view .LVU137
 438:Core/Src/main.c ****       command_idx = command_idx>1 ? command_idx-1 : 0;
 552              		.loc 1 438 14 is_stmt 0 view .LVU138
 553 00a0 7F2A     		cmp	r2, #127
 554 00a2 E4D0     		beq	.L40
 441:Core/Src/main.c ****       command[command_idx] = ch;
 555              		.loc 1 441 12 is_stmt 1 view .LVU139
 441:Core/Src/main.c ****       command[command_idx] = ch;
 556              		.loc 1 441 23 is_stmt 0 view .LVU140
 557 00a4 A2F1200E 		sub	lr, r2, #32
 558 00a8 5FFA8EFE 		uxtb	lr, lr
 441:Core/Src/main.c ****       command[command_idx] = ch;
 559              		.loc 1 441 14 view .LVU141
 560 00ac BEF15E0F 		cmp	lr, #94
 561 00b0 E3D8     		bhi	.L32
 442:Core/Src/main.c ****       command_idx++;
 562              		.loc 1 442 7 is_stmt 1 view .LVU142
 442:Core/Src/main.c ****       command_idx++;
 563              		.loc 1 442 28 is_stmt 0 view .LVU143
 564 00b2 0548     		ldr	r0, .L41+8
 565 00b4 C254     		strb	r2, [r0, r3]
 443:Core/Src/main.c ****     } // else ignore
 566              		.loc 1 443 7 is_stmt 1 view .LVU144
 443:Core/Src/main.c ****     } // else ignore
 567              		.loc 1 443 18 is_stmt 0 view .LVU145
 568 00b6 0133     		adds	r3, r3, #1
 569 00b8 024A     		ldr	r2, .L41+4
 570              	.LVL31:
 443:Core/Src/main.c ****     } // else ignore
 571              		.loc 1 443 18 view .LVU146
 572 00ba 1370     		strb	r3, [r2]
 573 00bc DDE7     		b	.L32
 574              	.L42:
 575 00be 00BF     		.align	2
 576              	.L41:
 577 00c0 00440040 		.word	1073759232
 578 00c4 00000000 		.word	command_idx
 579 00c8 00000000 		.word	command
 580 00cc 00000000 		.word	.LC0
 581 00d0 00000000 		.word	is_raw
ARM GAS  /tmp/ccBmS00B.s 			page 20


 582 00d4 00000000 		.word	input_buffer
 583 00d8 04000000 		.word	.LC1
 584 00dc 00000000 		.word	is_avg
 585 00e0 14000000 		.word	.LC2
 586 00e4 00000000 		.word	is_rnd
 587              	.LBE15:
 588              	.LBE16:
 589              		.cfi_endproc
 590              	.LFE250:
 592              		.section	.text.Error_Handler,"ax",%progbits
 593              		.align	1
 594              		.global	Error_Handler
 595              		.syntax unified
 596              		.thumb
 597              		.thumb_func
 599              	Error_Handler:
 600              	.LFB251:
 451:Core/Src/main.c **** /* USER CODE END 4 */
 452:Core/Src/main.c **** 
 453:Core/Src/main.c **** /**
 454:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 455:Core/Src/main.c ****   * @retval None
 456:Core/Src/main.c ****   */
 457:Core/Src/main.c **** void Error_Handler(void)
 458:Core/Src/main.c **** {
 601              		.loc 1 458 1 is_stmt 1 view -0
 602              		.cfi_startproc
 603              		@ Volatile: function does not return.
 604              		@ args = 0, pretend = 0, frame = 0
 605              		@ frame_needed = 0, uses_anonymous_args = 0
 606              		@ link register save eliminated.
 459:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 460:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 461:Core/Src/main.c ****   __disable_irq();
 607              		.loc 1 461 3 view .LVU148
 608              	.LBB17:
 609              	.LBI17:
 610              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
ARM GAS  /tmp/ccBmS00B.s 			page 21


  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
ARM GAS  /tmp/ccBmS00B.s 			page 22


  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
ARM GAS  /tmp/ccBmS00B.s 			page 23


 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
ARM GAS  /tmp/ccBmS00B.s 			page 24


 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
ARM GAS  /tmp/ccBmS00B.s 			page 25


 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccBmS00B.s 			page 26


 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
ARM GAS  /tmp/ccBmS00B.s 			page 27


 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
ARM GAS  /tmp/ccBmS00B.s 			page 28


 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccBmS00B.s 			page 29


 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
ARM GAS  /tmp/ccBmS00B.s 			page 30


 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
ARM GAS  /tmp/ccBmS00B.s 			page 31


 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccBmS00B.s 			page 32


 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
ARM GAS  /tmp/ccBmS00B.s 			page 33


 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
ARM GAS  /tmp/ccBmS00B.s 			page 34


 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  /tmp/ccBmS00B.s 			page 35


 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccBmS00B.s 			page 36


 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccBmS00B.s 			page 37


 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 611              		.loc 2 960 27 view .LVU149
 612              	.LBB18:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 613              		.loc 2 962 3 view .LVU150
 614              		.syntax unified
 615              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 616 0000 72B6     		cpsid i
 617              	@ 0 "" 2
 618              		.thumb
 619              		.syntax unified
 620              	.L44:
 621              	.LBE18:
 622              	.LBE17:
 462:Core/Src/main.c ****   while (1)
 623              		.loc 1 462 3 view .LVU151
 463:Core/Src/main.c ****   {
 464:Core/Src/main.c ****   }
 624              		.loc 1 464 3 view .LVU152
 462:Core/Src/main.c ****   while (1)
 625              		.loc 1 462 9 view .LVU153
 626 0002 FEE7     		b	.L44
 627              		.cfi_endproc
 628              	.LFE251:
 630              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 631              		.align	1
 632              		.syntax unified
 633              		.thumb
ARM GAS  /tmp/ccBmS00B.s 			page 38


 634              		.thumb_func
 636              	MX_USART2_UART_Init:
 637              	.LFB245:
 293:Core/Src/main.c **** 
 638              		.loc 1 293 1 view -0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 0
 641              		@ frame_needed = 0, uses_anonymous_args = 0
 642 0000 08B5     		push	{r3, lr}
 643              		.cfi_def_cfa_offset 8
 644              		.cfi_offset 3, -8
 645              		.cfi_offset 14, -4
 302:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 646              		.loc 1 302 3 view .LVU155
 302:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 647              		.loc 1 302 19 is_stmt 0 view .LVU156
 648 0002 0A48     		ldr	r0, .L49
 649 0004 0A4B     		ldr	r3, .L49+4
 650 0006 0360     		str	r3, [r0]
 303:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 651              		.loc 1 303 3 is_stmt 1 view .LVU157
 303:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 652              		.loc 1 303 24 is_stmt 0 view .LVU158
 653 0008 4FF4E133 		mov	r3, #115200
 654 000c 4360     		str	r3, [r0, #4]
 304:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 655              		.loc 1 304 3 is_stmt 1 view .LVU159
 304:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 656              		.loc 1 304 26 is_stmt 0 view .LVU160
 657 000e 0023     		movs	r3, #0
 658 0010 8360     		str	r3, [r0, #8]
 305:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 659              		.loc 1 305 3 is_stmt 1 view .LVU161
 305:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 660              		.loc 1 305 24 is_stmt 0 view .LVU162
 661 0012 C360     		str	r3, [r0, #12]
 306:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 662              		.loc 1 306 3 is_stmt 1 view .LVU163
 306:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 663              		.loc 1 306 22 is_stmt 0 view .LVU164
 664 0014 0361     		str	r3, [r0, #16]
 307:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 665              		.loc 1 307 3 is_stmt 1 view .LVU165
 307:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 666              		.loc 1 307 20 is_stmt 0 view .LVU166
 667 0016 0C22     		movs	r2, #12
 668 0018 4261     		str	r2, [r0, #20]
 308:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 669              		.loc 1 308 3 is_stmt 1 view .LVU167
 308:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 670              		.loc 1 308 25 is_stmt 0 view .LVU168
 671 001a 8361     		str	r3, [r0, #24]
 309:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 672              		.loc 1 309 3 is_stmt 1 view .LVU169
 309:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 673              		.loc 1 309 28 is_stmt 0 view .LVU170
 674 001c C361     		str	r3, [r0, #28]
ARM GAS  /tmp/ccBmS00B.s 			page 39


 310:Core/Src/main.c ****   {
 675              		.loc 1 310 3 is_stmt 1 view .LVU171
 310:Core/Src/main.c ****   {
 676              		.loc 1 310 7 is_stmt 0 view .LVU172
 677 001e FFF7FEFF 		bl	HAL_UART_Init
 678              	.LVL32:
 310:Core/Src/main.c ****   {
 679              		.loc 1 310 6 discriminator 1 view .LVU173
 680 0022 00B9     		cbnz	r0, .L48
 318:Core/Src/main.c **** 
 681              		.loc 1 318 1 view .LVU174
 682 0024 08BD     		pop	{r3, pc}
 683              	.L48:
 312:Core/Src/main.c ****   }
 684              		.loc 1 312 5 is_stmt 1 view .LVU175
 685 0026 FFF7FEFF 		bl	Error_Handler
 686              	.LVL33:
 687              	.L50:
 688 002a 00BF     		.align	2
 689              	.L49:
 690 002c 00000000 		.word	huart2
 691 0030 00440040 		.word	1073759232
 692              		.cfi_endproc
 693              	.LFE245:
 695              		.section	.text.MX_ADC1_Init,"ax",%progbits
 696              		.align	1
 697              		.syntax unified
 698              		.thumb
 699              		.thumb_func
 701              	MX_ADC1_Init:
 702              	.LFB244:
 241:Core/Src/main.c **** 
 703              		.loc 1 241 1 view -0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 16
 706              		@ frame_needed = 0, uses_anonymous_args = 0
 707 0000 00B5     		push	{lr}
 708              		.cfi_def_cfa_offset 4
 709              		.cfi_offset 14, -4
 710 0002 85B0     		sub	sp, sp, #20
 711              		.cfi_def_cfa_offset 24
 247:Core/Src/main.c **** 
 712              		.loc 1 247 3 view .LVU177
 247:Core/Src/main.c **** 
 713              		.loc 1 247 26 is_stmt 0 view .LVU178
 714 0004 0023     		movs	r3, #0
 715 0006 0093     		str	r3, [sp]
 716 0008 0193     		str	r3, [sp, #4]
 717 000a 0293     		str	r3, [sp, #8]
 718 000c 0393     		str	r3, [sp, #12]
 255:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 719              		.loc 1 255 3 is_stmt 1 view .LVU179
 255:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 720              		.loc 1 255 18 is_stmt 0 view .LVU180
 721 000e 1448     		ldr	r0, .L57
 722 0010 144A     		ldr	r2, .L57+4
 723 0012 0260     		str	r2, [r0]
ARM GAS  /tmp/ccBmS00B.s 			page 40


 256:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 724              		.loc 1 256 3 is_stmt 1 view .LVU181
 256:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 725              		.loc 1 256 29 is_stmt 0 view .LVU182
 726 0014 4FF48032 		mov	r2, #65536
 727 0018 4260     		str	r2, [r0, #4]
 257:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 728              		.loc 1 257 3 is_stmt 1 view .LVU183
 257:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 729              		.loc 1 257 25 is_stmt 0 view .LVU184
 730 001a 8360     		str	r3, [r0, #8]
 258:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 731              		.loc 1 258 3 is_stmt 1 view .LVU185
 258:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 732              		.loc 1 258 27 is_stmt 0 view .LVU186
 733 001c 0361     		str	r3, [r0, #16]
 259:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 734              		.loc 1 259 3 is_stmt 1 view .LVU187
 259:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 735              		.loc 1 259 33 is_stmt 0 view .LVU188
 736 001e 0376     		strb	r3, [r0, #24]
 260:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 737              		.loc 1 260 3 is_stmt 1 view .LVU189
 260:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 738              		.loc 1 260 36 is_stmt 0 view .LVU190
 739 0020 80F82030 		strb	r3, [r0, #32]
 261:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 740              		.loc 1 261 3 is_stmt 1 view .LVU191
 261:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 741              		.loc 1 261 35 is_stmt 0 view .LVU192
 742 0024 C362     		str	r3, [r0, #44]
 262:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 743              		.loc 1 262 3 is_stmt 1 view .LVU193
 262:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 744              		.loc 1 262 31 is_stmt 0 view .LVU194
 745 0026 104A     		ldr	r2, .L57+8
 746 0028 8262     		str	r2, [r0, #40]
 263:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 747              		.loc 1 263 3 is_stmt 1 view .LVU195
 263:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 748              		.loc 1 263 24 is_stmt 0 view .LVU196
 749 002a C360     		str	r3, [r0, #12]
 264:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 750              		.loc 1 264 3 is_stmt 1 view .LVU197
 264:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 751              		.loc 1 264 30 is_stmt 0 view .LVU198
 752 002c 0122     		movs	r2, #1
 753 002e C261     		str	r2, [r0, #28]
 265:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 754              		.loc 1 265 3 is_stmt 1 view .LVU199
 265:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 755              		.loc 1 265 36 is_stmt 0 view .LVU200
 756 0030 80F83030 		strb	r3, [r0, #48]
 266:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 757              		.loc 1 266 3 is_stmt 1 view .LVU201
 266:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 758              		.loc 1 266 27 is_stmt 0 view .LVU202
ARM GAS  /tmp/ccBmS00B.s 			page 41


 759 0034 4261     		str	r2, [r0, #20]
 267:Core/Src/main.c ****   {
 760              		.loc 1 267 3 is_stmt 1 view .LVU203
 267:Core/Src/main.c ****   {
 761              		.loc 1 267 7 is_stmt 0 view .LVU204
 762 0036 FFF7FEFF 		bl	HAL_ADC_Init
 763              	.LVL34:
 267:Core/Src/main.c ****   {
 764              		.loc 1 267 6 discriminator 1 view .LVU205
 765 003a 68B9     		cbnz	r0, .L55
 274:Core/Src/main.c ****   sConfig.Rank = 1;
 766              		.loc 1 274 3 is_stmt 1 view .LVU206
 274:Core/Src/main.c ****   sConfig.Rank = 1;
 767              		.loc 1 274 19 is_stmt 0 view .LVU207
 768 003c 0623     		movs	r3, #6
 769 003e 0093     		str	r3, [sp]
 275:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 770              		.loc 1 275 3 is_stmt 1 view .LVU208
 275:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 771              		.loc 1 275 16 is_stmt 0 view .LVU209
 772 0040 0123     		movs	r3, #1
 773 0042 0193     		str	r3, [sp, #4]
 276:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 774              		.loc 1 276 3 is_stmt 1 view .LVU210
 276:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 775              		.loc 1 276 24 is_stmt 0 view .LVU211
 776 0044 0023     		movs	r3, #0
 777 0046 0293     		str	r3, [sp, #8]
 277:Core/Src/main.c ****   {
 778              		.loc 1 277 3 is_stmt 1 view .LVU212
 277:Core/Src/main.c ****   {
 779              		.loc 1 277 7 is_stmt 0 view .LVU213
 780 0048 6946     		mov	r1, sp
 781 004a 0548     		ldr	r0, .L57
 782 004c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 783              	.LVL35:
 277:Core/Src/main.c ****   {
 784              		.loc 1 277 6 discriminator 1 view .LVU214
 785 0050 20B9     		cbnz	r0, .L56
 285:Core/Src/main.c **** 
 786              		.loc 1 285 1 view .LVU215
 787 0052 05B0     		add	sp, sp, #20
 788              		.cfi_remember_state
 789              		.cfi_def_cfa_offset 4
 790              		@ sp needed
 791 0054 5DF804FB 		ldr	pc, [sp], #4
 792              	.L55:
 793              		.cfi_restore_state
 269:Core/Src/main.c ****   }
 794              		.loc 1 269 5 is_stmt 1 view .LVU216
 795 0058 FFF7FEFF 		bl	Error_Handler
 796              	.LVL36:
 797              	.L56:
 279:Core/Src/main.c ****   }
 798              		.loc 1 279 5 view .LVU217
 799 005c FFF7FEFF 		bl	Error_Handler
 800              	.LVL37:
ARM GAS  /tmp/ccBmS00B.s 			page 42


 801              	.L58:
 802              		.align	2
 803              	.L57:
 804 0060 00000000 		.word	hadc1
 805 0064 00200140 		.word	1073815552
 806 0068 0100000F 		.word	251658241
 807              		.cfi_endproc
 808              	.LFE244:
 810              		.section	.text.SystemClock_Config,"ax",%progbits
 811              		.align	1
 812              		.global	SystemClock_Config
 813              		.syntax unified
 814              		.thumb
 815              		.thumb_func
 817              	SystemClock_Config:
 818              	.LFB243:
 193:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 819              		.loc 1 193 1 view -0
 820              		.cfi_startproc
 821              		@ args = 0, pretend = 0, frame = 80
 822              		@ frame_needed = 0, uses_anonymous_args = 0
 823 0000 00B5     		push	{lr}
 824              		.cfi_def_cfa_offset 4
 825              		.cfi_offset 14, -4
 826 0002 95B0     		sub	sp, sp, #84
 827              		.cfi_def_cfa_offset 88
 194:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 828              		.loc 1 194 3 view .LVU219
 194:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 829              		.loc 1 194 22 is_stmt 0 view .LVU220
 830 0004 3422     		movs	r2, #52
 831 0006 0021     		movs	r1, #0
 832 0008 07A8     		add	r0, sp, #28
 833 000a FFF7FEFF 		bl	memset
 834              	.LVL38:
 195:Core/Src/main.c **** 
 835              		.loc 1 195 3 is_stmt 1 view .LVU221
 195:Core/Src/main.c **** 
 836              		.loc 1 195 22 is_stmt 0 view .LVU222
 837 000e 0023     		movs	r3, #0
 838 0010 0293     		str	r3, [sp, #8]
 839 0012 0393     		str	r3, [sp, #12]
 840 0014 0493     		str	r3, [sp, #16]
 841 0016 0593     		str	r3, [sp, #20]
 842 0018 0693     		str	r3, [sp, #24]
 199:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 843              		.loc 1 199 3 is_stmt 1 view .LVU223
 844              	.LBB19:
 199:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 845              		.loc 1 199 3 view .LVU224
 846 001a 0093     		str	r3, [sp]
 199:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 847              		.loc 1 199 3 view .LVU225
 848 001c 1F4A     		ldr	r2, .L65
 849 001e 116C     		ldr	r1, [r2, #64]
 850 0020 41F08051 		orr	r1, r1, #268435456
 851 0024 1164     		str	r1, [r2, #64]
ARM GAS  /tmp/ccBmS00B.s 			page 43


 199:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 852              		.loc 1 199 3 view .LVU226
 853 0026 126C     		ldr	r2, [r2, #64]
 854 0028 02F08052 		and	r2, r2, #268435456
 855 002c 0092     		str	r2, [sp]
 199:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 856              		.loc 1 199 3 view .LVU227
 857 002e 009A     		ldr	r2, [sp]
 858              	.LBE19:
 199:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 859              		.loc 1 199 3 view .LVU228
 200:Core/Src/main.c **** 
 860              		.loc 1 200 3 view .LVU229
 861              	.LBB20:
 200:Core/Src/main.c **** 
 862              		.loc 1 200 3 view .LVU230
 863 0030 0193     		str	r3, [sp, #4]
 200:Core/Src/main.c **** 
 864              		.loc 1 200 3 view .LVU231
 865 0032 1B49     		ldr	r1, .L65+4
 866 0034 0A68     		ldr	r2, [r1]
 867 0036 22F44042 		bic	r2, r2, #49152
 868 003a 42F48042 		orr	r2, r2, #16384
 869 003e 0A60     		str	r2, [r1]
 200:Core/Src/main.c **** 
 870              		.loc 1 200 3 view .LVU232
 871 0040 0A68     		ldr	r2, [r1]
 872 0042 02F44042 		and	r2, r2, #49152
 873 0046 0192     		str	r2, [sp, #4]
 200:Core/Src/main.c **** 
 874              		.loc 1 200 3 view .LVU233
 875 0048 019A     		ldr	r2, [sp, #4]
 876              	.LBE20:
 200:Core/Src/main.c **** 
 877              		.loc 1 200 3 view .LVU234
 205:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 878              		.loc 1 205 3 view .LVU235
 205:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 879              		.loc 1 205 36 is_stmt 0 view .LVU236
 880 004a 0222     		movs	r2, #2
 881 004c 0792     		str	r2, [sp, #28]
 206:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 882              		.loc 1 206 3 is_stmt 1 view .LVU237
 206:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 883              		.loc 1 206 30 is_stmt 0 view .LVU238
 884 004e 0121     		movs	r1, #1
 885 0050 0A91     		str	r1, [sp, #40]
 207:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 886              		.loc 1 207 3 is_stmt 1 view .LVU239
 207:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 887              		.loc 1 207 41 is_stmt 0 view .LVU240
 888 0052 1021     		movs	r1, #16
 889 0054 0B91     		str	r1, [sp, #44]
 208:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 890              		.loc 1 208 3 is_stmt 1 view .LVU241
 208:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 891              		.loc 1 208 34 is_stmt 0 view .LVU242
ARM GAS  /tmp/ccBmS00B.s 			page 44


 892 0056 0D92     		str	r2, [sp, #52]
 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 893              		.loc 1 209 3 is_stmt 1 view .LVU243
 209:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 894              		.loc 1 209 35 is_stmt 0 view .LVU244
 895 0058 0E93     		str	r3, [sp, #56]
 210:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 896              		.loc 1 210 3 is_stmt 1 view .LVU245
 210:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 897              		.loc 1 210 30 is_stmt 0 view .LVU246
 898 005a 0F91     		str	r1, [sp, #60]
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 899              		.loc 1 211 3 is_stmt 1 view .LVU247
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 900              		.loc 1 211 30 is_stmt 0 view .LVU248
 901 005c 4FF4A873 		mov	r3, #336
 902 0060 1093     		str	r3, [sp, #64]
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 903              		.loc 1 212 3 is_stmt 1 view .LVU249
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 904              		.loc 1 212 30 is_stmt 0 view .LVU250
 905 0062 0423     		movs	r3, #4
 906 0064 1193     		str	r3, [sp, #68]
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 907              		.loc 1 213 3 is_stmt 1 view .LVU251
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 908              		.loc 1 213 30 is_stmt 0 view .LVU252
 909 0066 1292     		str	r2, [sp, #72]
 214:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 910              		.loc 1 214 3 is_stmt 1 view .LVU253
 214:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 911              		.loc 1 214 30 is_stmt 0 view .LVU254
 912 0068 1392     		str	r2, [sp, #76]
 215:Core/Src/main.c ****   {
 913              		.loc 1 215 3 is_stmt 1 view .LVU255
 215:Core/Src/main.c ****   {
 914              		.loc 1 215 7 is_stmt 0 view .LVU256
 915 006a 07A8     		add	r0, sp, #28
 916 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 917              	.LVL39:
 215:Core/Src/main.c ****   {
 918              		.loc 1 215 6 discriminator 1 view .LVU257
 919 0070 80B9     		cbnz	r0, .L63
 222:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 920              		.loc 1 222 3 is_stmt 1 view .LVU258
 222:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 921              		.loc 1 222 31 is_stmt 0 view .LVU259
 922 0072 0F23     		movs	r3, #15
 923 0074 0293     		str	r3, [sp, #8]
 224:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 924              		.loc 1 224 3 is_stmt 1 view .LVU260
 224:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 925              		.loc 1 224 34 is_stmt 0 view .LVU261
 926 0076 0221     		movs	r1, #2
 927 0078 0391     		str	r1, [sp, #12]
 225:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 928              		.loc 1 225 3 is_stmt 1 view .LVU262
ARM GAS  /tmp/ccBmS00B.s 			page 45


 225:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 929              		.loc 1 225 35 is_stmt 0 view .LVU263
 930 007a 0023     		movs	r3, #0
 931 007c 0493     		str	r3, [sp, #16]
 226:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 932              		.loc 1 226 3 is_stmt 1 view .LVU264
 226:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 933              		.loc 1 226 36 is_stmt 0 view .LVU265
 934 007e 4FF48052 		mov	r2, #4096
 935 0082 0592     		str	r2, [sp, #20]
 227:Core/Src/main.c **** 
 936              		.loc 1 227 3 is_stmt 1 view .LVU266
 227:Core/Src/main.c **** 
 937              		.loc 1 227 36 is_stmt 0 view .LVU267
 938 0084 0693     		str	r3, [sp, #24]
 229:Core/Src/main.c ****   {
 939              		.loc 1 229 3 is_stmt 1 view .LVU268
 229:Core/Src/main.c ****   {
 940              		.loc 1 229 7 is_stmt 0 view .LVU269
 941 0086 02A8     		add	r0, sp, #8
 942 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 943              	.LVL40:
 229:Core/Src/main.c ****   {
 944              		.loc 1 229 6 discriminator 1 view .LVU270
 945 008c 20B9     		cbnz	r0, .L64
 233:Core/Src/main.c **** 
 946              		.loc 1 233 1 view .LVU271
 947 008e 15B0     		add	sp, sp, #84
 948              		.cfi_remember_state
 949              		.cfi_def_cfa_offset 4
 950              		@ sp needed
 951 0090 5DF804FB 		ldr	pc, [sp], #4
 952              	.L63:
 953              		.cfi_restore_state
 217:Core/Src/main.c ****   }
 954              		.loc 1 217 5 is_stmt 1 view .LVU272
 955 0094 FFF7FEFF 		bl	Error_Handler
 956              	.LVL41:
 957              	.L64:
 231:Core/Src/main.c ****   }
 958              		.loc 1 231 5 view .LVU273
 959 0098 FFF7FEFF 		bl	Error_Handler
 960              	.LVL42:
 961              	.L66:
 962              		.align	2
 963              	.L65:
 964 009c 00380240 		.word	1073887232
 965 00a0 00700040 		.word	1073770496
 966              		.cfi_endproc
 967              	.LFE243:
 969              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 970              		.align	2
 971              	.LC3:
 972 0000 256C7509 		.ascii	"%lu\011%lu\012\000"
 972      256C750A 
 972      00
 973 0009 000000   		.align	2
ARM GAS  /tmp/ccBmS00B.s 			page 46


 974              	.LC4:
 975 000c 5741524E 		.ascii	"WARNING\015\012\000"
 975      494E470D 
 975      0A00
 976              		.section	.text.main,"ax",%progbits
 977              		.align	1
 978              		.global	main
 979              		.syntax unified
 980              		.thumb
 981              		.thumb_func
 983              	main:
 984              	.LFB242:
  93:Core/Src/main.c **** 
 985              		.loc 1 93 1 view -0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 56
 988              		@ frame_needed = 0, uses_anonymous_args = 0
 989 0000 10B5     		push	{r4, lr}
 990              		.cfi_def_cfa_offset 8
 991              		.cfi_offset 4, -8
 992              		.cfi_offset 14, -4
 993 0002 90B0     		sub	sp, sp, #64
 994              		.cfi_def_cfa_offset 72
  96:Core/Src/main.c ****   //srand(time(NULL));
 995              		.loc 1 96 3 view .LVU275
  96:Core/Src/main.c ****   //srand(time(NULL));
 996              		.loc 1 96 9 is_stmt 0 view .LVU276
 997 0004 0023     		movs	r3, #0
 998 0006 394A     		ldr	r2, .L81
 999 0008 1370     		strb	r3, [r2]
  98:Core/Src/main.c ****   Digital_Hall = 0;
 1000              		.loc 1 98 3 is_stmt 1 view .LVU277
  98:Core/Src/main.c ****   Digital_Hall = 0;
 1001              		.loc 1 98 15 is_stmt 0 view .LVU278
 1002 000a 394A     		ldr	r2, .L81+4
 1003 000c 1360     		str	r3, [r2]
  99:Core/Src/main.c ****   for(int i=0; i<BUFFER_SIZE; i++) input_buffer[i]=0;
 1004              		.loc 1 99 3 is_stmt 1 view .LVU279
  99:Core/Src/main.c ****   for(int i=0; i<BUFFER_SIZE; i++) input_buffer[i]=0;
 1005              		.loc 1 99 16 is_stmt 0 view .LVU280
 1006 000e 394A     		ldr	r2, .L81+8
 1007 0010 1360     		str	r3, [r2]
 100:Core/Src/main.c ****   for(int i=0; i<BUFFER_SIZE; i++) command[i]=0;
 1008              		.loc 1 100 3 is_stmt 1 view .LVU281
 1009              	.LBB21:
 100:Core/Src/main.c ****   for(int i=0; i<BUFFER_SIZE; i++) command[i]=0;
 1010              		.loc 1 100 7 view .LVU282
 1011              	.LVL43:
 100:Core/Src/main.c ****   for(int i=0; i<BUFFER_SIZE; i++) command[i]=0;
 1012              		.loc 1 100 3 is_stmt 0 view .LVU283
 1013 0012 03E0     		b	.L68
 1014              	.LVL44:
 1015              	.L69:
 100:Core/Src/main.c ****   for(int i=0; i<BUFFER_SIZE; i++) command[i]=0;
 1016              		.loc 1 100 36 is_stmt 1 discriminator 3 view .LVU284
 100:Core/Src/main.c ****   for(int i=0; i<BUFFER_SIZE; i++) command[i]=0;
 1017              		.loc 1 100 51 is_stmt 0 discriminator 3 view .LVU285
ARM GAS  /tmp/ccBmS00B.s 			page 47


 1018 0014 384A     		ldr	r2, .L81+12
 1019 0016 0021     		movs	r1, #0
 1020 0018 D154     		strb	r1, [r2, r3]
 100:Core/Src/main.c ****   for(int i=0; i<BUFFER_SIZE; i++) command[i]=0;
 1021              		.loc 1 100 32 is_stmt 1 discriminator 3 view .LVU286
 1022 001a 0133     		adds	r3, r3, #1
 1023              	.LVL45:
 1024              	.L68:
 100:Core/Src/main.c ****   for(int i=0; i<BUFFER_SIZE; i++) command[i]=0;
 1025              		.loc 1 100 17 discriminator 1 view .LVU287
 1026 001c 1D2B     		cmp	r3, #29
 1027 001e F9DD     		ble	.L69
 1028              	.LBE21:
 1029              	.LBB22:
 101:Core/Src/main.c ****   command_idx = 0;
 1030              		.loc 1 101 11 is_stmt 0 view .LVU288
 1031 0020 0023     		movs	r3, #0
 1032              	.LVL46:
 101:Core/Src/main.c ****   command_idx = 0;
 1033              		.loc 1 101 11 view .LVU289
 1034 0022 03E0     		b	.L70
 1035              	.LVL47:
 1036              	.L71:
 101:Core/Src/main.c ****   command_idx = 0;
 1037              		.loc 1 101 36 is_stmt 1 discriminator 3 view .LVU290
 101:Core/Src/main.c ****   command_idx = 0;
 1038              		.loc 1 101 46 is_stmt 0 discriminator 3 view .LVU291
 1039 0024 354A     		ldr	r2, .L81+16
 1040 0026 0021     		movs	r1, #0
 1041 0028 D154     		strb	r1, [r2, r3]
 101:Core/Src/main.c ****   command_idx = 0;
 1042              		.loc 1 101 32 is_stmt 1 discriminator 3 view .LVU292
 1043 002a 0133     		adds	r3, r3, #1
 1044              	.LVL48:
 1045              	.L70:
 101:Core/Src/main.c ****   command_idx = 0;
 1046              		.loc 1 101 17 discriminator 1 view .LVU293
 1047 002c 1D2B     		cmp	r3, #29
 1048 002e F9DD     		ble	.L71
 1049              	.LBE22:
 102:Core/Src/main.c ****   is_adc_ready = false;
 1050              		.loc 1 102 3 view .LVU294
 102:Core/Src/main.c ****   is_adc_ready = false;
 1051              		.loc 1 102 15 is_stmt 0 view .LVU295
 1052 0030 0023     		movs	r3, #0
 1053              	.LVL49:
 102:Core/Src/main.c ****   is_adc_ready = false;
 1054              		.loc 1 102 15 view .LVU296
 1055 0032 334A     		ldr	r2, .L81+20
 1056 0034 1370     		strb	r3, [r2]
 103:Core/Src/main.c **** 
 1057              		.loc 1 103 3 is_stmt 1 view .LVU297
 103:Core/Src/main.c **** 
 1058              		.loc 1 103 16 is_stmt 0 view .LVU298
 1059 0036 334A     		ldr	r2, .L81+24
 1060 0038 1370     		strb	r3, [r2]
 110:Core/Src/main.c **** 
ARM GAS  /tmp/ccBmS00B.s 			page 48


 1061              		.loc 1 110 3 is_stmt 1 view .LVU299
 1062 003a FFF7FEFF 		bl	HAL_Init
 1063              	.LVL50:
 117:Core/Src/main.c **** 
 1064              		.loc 1 117 3 view .LVU300
 1065 003e FFF7FEFF 		bl	SystemClock_Config
 1066              	.LVL51:
 124:Core/Src/main.c ****   MX_DMA_Init();
 1067              		.loc 1 124 3 view .LVU301
 1068 0042 FFF7FEFF 		bl	MX_GPIO_Init
 1069              	.LVL52:
 125:Core/Src/main.c ****   MX_USART2_UART_Init();
 1070              		.loc 1 125 3 view .LVU302
 1071 0046 FFF7FEFF 		bl	MX_DMA_Init
 1072              	.LVL53:
 126:Core/Src/main.c ****   MX_ADC1_Init();
 1073              		.loc 1 126 3 view .LVU303
 1074 004a FFF7FEFF 		bl	MX_USART2_UART_Init
 1075              	.LVL54:
 127:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1076              		.loc 1 127 3 view .LVU304
 1077 004e FFF7FEFF 		bl	MX_ADC1_Init
 1078              	.LVL55:
 129:Core/Src/main.c ****   if(HAL_UARTEx_ReceiveToIdle_IT(&huart2,input_buffer,sizeof(input_buffer))!=HAL_OK)
 1079              		.loc 1 129 3 view .LVU305
 129:Core/Src/main.c ****   if(HAL_UARTEx_ReceiveToIdle_IT(&huart2,input_buffer,sizeof(input_buffer))!=HAL_OK)
 1080              		.loc 1 129 9 is_stmt 0 view .LVU306
 1081 0052 264B     		ldr	r3, .L81
 1082 0054 0122     		movs	r2, #1
 1083 0056 1A70     		strb	r2, [r3]
 130:Core/Src/main.c ****   {
 1084              		.loc 1 130 3 is_stmt 1 view .LVU307
 130:Core/Src/main.c ****   {
 1085              		.loc 1 130 6 is_stmt 0 view .LVU308
 1086 0058 1E22     		movs	r2, #30
 1087 005a 2749     		ldr	r1, .L81+12
 1088 005c 2A48     		ldr	r0, .L81+28
 1089 005e FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 1090              	.LVL56:
 130:Core/Src/main.c ****   {
 1091              		.loc 1 130 5 discriminator 1 view .LVU309
 1092 0062 0028     		cmp	r0, #0
 1093 0064 2FD0     		beq	.L78
 132:Core/Src/main.c ****   }
 1094              		.loc 1 132 5 is_stmt 1 view .LVU310
 132:Core/Src/main.c ****   }
 1095              		.loc 1 132 11 is_stmt 0 view .LVU311
 1096 0066 214B     		ldr	r3, .L81
 1097 0068 0522     		movs	r2, #5
 1098 006a 1A70     		strb	r2, [r3]
 1099 006c 2BE0     		b	.L78
 1100              	.L80:
 142:Core/Src/main.c ****     }
 1101              		.loc 1 142 7 is_stmt 1 view .LVU312
 142:Core/Src/main.c ****     }
 1102              		.loc 1 142 13 is_stmt 0 view .LVU313
 1103 006e 1F4B     		ldr	r3, .L81
ARM GAS  /tmp/ccBmS00B.s 			page 49


 1104 0070 0222     		movs	r2, #2
 1105 0072 1A70     		strb	r2, [r3]
 1106 0074 2DE0     		b	.L73
 1107              	.L74:
 1108              	.LBB23:
 155:Core/Src/main.c ****     //READ DIGITAL
 1109              		.loc 1 155 5 is_stmt 1 view .LVU314
 1110 0076 0122     		movs	r2, #1
 1111 0078 1D49     		ldr	r1, .L81+4
 1112 007a 2448     		ldr	r0, .L81+32
 1113 007c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1114              	.LVL57:
 159:Core/Src/main.c ****     char buf[50] = {0};
 1115              		.loc 1 159 5 view .LVU315
 1116              	.L77:
 159:Core/Src/main.c ****     char buf[50] = {0};
 1117              		.loc 1 159 11 discriminator 1 view .LVU316
 1118 0080 204B     		ldr	r3, .L81+24
 1119 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1120 0084 002B     		cmp	r3, #0
 1121 0086 FBD0     		beq	.L77
 160:Core/Src/main.c ****     snprintf(buf,50,"%lu\t%lu\n",Analog_Hall,Digital_Hall);
 1122              		.loc 1 160 5 view .LVU317
 160:Core/Src/main.c ****     snprintf(buf,50,"%lu\t%lu\n",Analog_Hall,Digital_Hall);
 1123              		.loc 1 160 10 is_stmt 0 view .LVU318
 1124 0088 3224     		movs	r4, #50
 1125 008a 2246     		mov	r2, r4
 1126 008c 0021     		movs	r1, #0
 1127 008e 03A8     		add	r0, sp, #12
 1128 0090 FFF7FEFF 		bl	memset
 1129              	.LVL58:
 161:Core/Src/main.c ****     HAL_Delay(50);
 1130              		.loc 1 161 5 is_stmt 1 view .LVU319
 1131 0094 174B     		ldr	r3, .L81+8
 1132 0096 1B68     		ldr	r3, [r3]
 1133 0098 0093     		str	r3, [sp]
 1134 009a 154B     		ldr	r3, .L81+4
 1135 009c 1B68     		ldr	r3, [r3]
 1136 009e 1C4A     		ldr	r2, .L81+36
 1137 00a0 2146     		mov	r1, r4
 1138 00a2 03A8     		add	r0, sp, #12
 1139 00a4 FFF7FEFF 		bl	snprintf
 1140              	.LVL59:
 162:Core/Src/main.c ****     HAL_UART_Transmit(&huart2,buf,strlen(buf),20);
 1141              		.loc 1 162 5 view .LVU320
 1142 00a8 2046     		mov	r0, r4
 1143 00aa FFF7FEFF 		bl	HAL_Delay
 1144              	.LVL60:
 163:Core/Src/main.c ****     is_adc_ready = false;
 1145              		.loc 1 163 5 view .LVU321
 163:Core/Src/main.c ****     is_adc_ready = false;
 1146              		.loc 1 163 35 is_stmt 0 view .LVU322
 1147 00ae 03A8     		add	r0, sp, #12
 1148 00b0 FFF7FEFF 		bl	strlen
 1149              	.LVL61:
 163:Core/Src/main.c ****     is_adc_ready = false;
 1150              		.loc 1 163 5 discriminator 1 view .LVU323
ARM GAS  /tmp/ccBmS00B.s 			page 50


 1151 00b4 1423     		movs	r3, #20
 1152 00b6 82B2     		uxth	r2, r0
 1153 00b8 03A9     		add	r1, sp, #12
 1154 00ba 1348     		ldr	r0, .L81+28
 1155 00bc FFF7FEFF 		bl	HAL_UART_Transmit
 1156              	.LVL62:
 164:Core/Src/main.c ****       break;
 1157              		.loc 1 164 5 is_stmt 1 view .LVU324
 164:Core/Src/main.c ****       break;
 1158              		.loc 1 164 18 is_stmt 0 view .LVU325
 1159 00c0 104B     		ldr	r3, .L81+24
 1160 00c2 0022     		movs	r2, #0
 1161 00c4 1A70     		strb	r2, [r3]
 165:Core/Src/main.c ****     
 1162              		.loc 1 165 7 is_stmt 1 view .LVU326
 1163              	.L78:
 1164              	.LBE23:
 138:Core/Src/main.c ****   {
 1165              		.loc 1 138 3 view .LVU327
 141:Core/Src/main.c ****       STATE = APP_LISTENING;
 1166              		.loc 1 141 5 view .LVU328
 141:Core/Src/main.c ****       STATE = APP_LISTENING;
 1167              		.loc 1 141 14 is_stmt 0 view .LVU329
 1168 00c6 104B     		ldr	r3, .L81+28
 1169 00c8 93F84230 		ldrb	r3, [r3, #66]	@ zero_extendqisi2
 1170 00cc DBB2     		uxtb	r3, r3
 141:Core/Src/main.c ****       STATE = APP_LISTENING;
 1171              		.loc 1 141 7 view .LVU330
 1172 00ce 202B     		cmp	r3, #32
 1173 00d0 CDD0     		beq	.L80
 1174              	.L73:
 145:Core/Src/main.c ****     {
 1175              		.loc 1 145 5 is_stmt 1 view .LVU331
 1176 00d2 064B     		ldr	r3, .L81
 1177 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1178 00d6 022B     		cmp	r3, #2
 1179 00d8 CDD0     		beq	.L74
 1180 00da 052B     		cmp	r3, #5
 1181 00dc F3D1     		bne	.L78
 1182              	.LBB24:
 174:Core/Src/main.c ****       break;
 1183              		.loc 1 174 5 view .LVU332
 1184 00de 1E23     		movs	r3, #30
 1185 00e0 0A22     		movs	r2, #10
 1186 00e2 0C49     		ldr	r1, .L81+40
 1187 00e4 0848     		ldr	r0, .L81+28
 1188 00e6 FFF7FEFF 		bl	HAL_UART_Transmit
 1189              	.LVL63:
 175:Core/Src/main.c ****     
 1190              		.loc 1 175 7 view .LVU333
 1191              	.LBE24:
 138:Core/Src/main.c ****   {
 1192              		.loc 1 138 9 view .LVU334
 141:Core/Src/main.c ****       STATE = APP_LISTENING;
 1193              		.loc 1 141 7 is_stmt 0 view .LVU335
 1194 00ea ECE7     		b	.L78
 1195              	.L82:
ARM GAS  /tmp/ccBmS00B.s 			page 51


 1196              		.align	2
 1197              	.L81:
 1198 00ec 00000000 		.word	STATE
 1199 00f0 00000000 		.word	Analog_Hall
 1200 00f4 00000000 		.word	Digital_Hall
 1201 00f8 00000000 		.word	input_buffer
 1202 00fc 00000000 		.word	command
 1203 0100 00000000 		.word	command_idx
 1204 0104 00000000 		.word	is_adc_ready
 1205 0108 00000000 		.word	huart2
 1206 010c 00000000 		.word	hadc1
 1207 0110 00000000 		.word	.LC3
 1208 0114 0C000000 		.word	.LC4
 1209              		.cfi_endproc
 1210              	.LFE242:
 1212              		.global	is_rnd
 1213              		.section	.bss.is_rnd,"aw",%nobits
 1216              	is_rnd:
 1217 0000 00       		.space	1
 1218              		.global	is_avg
 1219              		.section	.bss.is_avg,"aw",%nobits
 1222              	is_avg:
 1223 0000 00       		.space	1
 1224              		.global	is_raw
 1225              		.section	.bss.is_raw,"aw",%nobits
 1228              	is_raw:
 1229 0000 00       		.space	1
 1230              		.global	is_adc_ready
 1231              		.section	.bss.is_adc_ready,"aw",%nobits
 1234              	is_adc_ready:
 1235 0000 00       		.space	1
 1236              		.global	STATE
 1237              		.section	.bss.STATE,"aw",%nobits
 1240              	STATE:
 1241 0000 00       		.space	1
 1242              		.global	command_idx
 1243              		.section	.bss.command_idx,"aw",%nobits
 1246              	command_idx:
 1247 0000 00       		.space	1
 1248              		.global	command
 1249              		.section	.bss.command,"aw",%nobits
 1250              		.align	2
 1253              	command:
 1254 0000 00000000 		.space	30
 1254      00000000 
 1254      00000000 
 1254      00000000 
 1254      00000000 
 1255              		.global	input_buffer
 1256              		.section	.bss.input_buffer,"aw",%nobits
 1257              		.align	2
 1260              	input_buffer:
 1261 0000 00000000 		.space	30
 1261      00000000 
 1261      00000000 
 1261      00000000 
 1261      00000000 
ARM GAS  /tmp/ccBmS00B.s 			page 52


 1262              		.global	Digital_Hall
 1263              		.section	.bss.Digital_Hall,"aw",%nobits
 1264              		.align	2
 1267              	Digital_Hall:
 1268 0000 00000000 		.space	4
 1269              		.global	Analog_Hall
 1270              		.section	.bss.Analog_Hall,"aw",%nobits
 1271              		.align	2
 1274              	Analog_Hall:
 1275 0000 00000000 		.space	4
 1276              		.global	hdma_usart2_tx
 1277              		.section	.bss.hdma_usart2_tx,"aw",%nobits
 1278              		.align	2
 1281              	hdma_usart2_tx:
 1282 0000 00000000 		.space	96
 1282      00000000 
 1282      00000000 
 1282      00000000 
 1282      00000000 
 1283              		.global	huart2
 1284              		.section	.bss.huart2,"aw",%nobits
 1285              		.align	2
 1288              	huart2:
 1289 0000 00000000 		.space	72
 1289      00000000 
 1289      00000000 
 1289      00000000 
 1289      00000000 
 1290              		.global	hdma_adc1
 1291              		.section	.bss.hdma_adc1,"aw",%nobits
 1292              		.align	2
 1295              	hdma_adc1:
 1296 0000 00000000 		.space	96
 1296      00000000 
 1296      00000000 
 1296      00000000 
 1296      00000000 
 1297              		.global	hadc1
 1298              		.section	.bss.hadc1,"aw",%nobits
 1299              		.align	2
 1302              	hadc1:
 1303 0000 00000000 		.space	72
 1303      00000000 
 1303      00000000 
 1303      00000000 
 1303      00000000 
 1304              		.text
 1305              	.Letext0:
 1306              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1307              		.file 4 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 1308              		.file 5 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 1309              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1310              		.file 7 "/opt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/13.3.1/include/stddef.h"
 1311              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1312              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1313              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1314              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
ARM GAS  /tmp/ccBmS00B.s 			page 53


 1315              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1316              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1317              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1318              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1319              		.file 16 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/string.h"
 1320              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1321              		.file 18 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/stdio.h"
 1322              		.file 19 "<built-in>"
ARM GAS  /tmp/ccBmS00B.s 			page 54


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccBmS00B.s:21     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccBmS00B.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccBmS00B.s:198    .text.MX_GPIO_Init:000000d0 $d
     /tmp/ccBmS00B.s:205    .text.MX_DMA_Init:00000000 $t
     /tmp/ccBmS00B.s:210    .text.MX_DMA_Init:00000000 MX_DMA_Init
     /tmp/ccBmS00B.s:284    .text.MX_DMA_Init:00000054 $d
     /tmp/ccBmS00B.s:289    .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/ccBmS00B.s:295    .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/ccBmS00B.s:313    .text.HAL_ADC_ConvCpltCallback:00000008 $d
     /tmp/ccBmS00B.s:1234   .bss.is_adc_ready:00000000 is_adc_ready
     /tmp/ccBmS00B.s:318    .text.HAL_GPIO_EXTI_Callback:00000000 $t
     /tmp/ccBmS00B.s:324    .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
     /tmp/ccBmS00B.s:362    .text.HAL_GPIO_EXTI_Callback:0000001c $d
     /tmp/ccBmS00B.s:1267   .bss.Digital_Hall:00000000 Digital_Hall
     /tmp/ccBmS00B.s:368    .rodata.HAL_UARTEx_RxEventCallback.str1.4:00000000 $d
     /tmp/ccBmS00B.s:378    .text.HAL_UARTEx_RxEventCallback:00000000 $t
     /tmp/ccBmS00B.s:384    .text.HAL_UARTEx_RxEventCallback:00000000 HAL_UARTEx_RxEventCallback
     /tmp/ccBmS00B.s:577    .text.HAL_UARTEx_RxEventCallback:000000c0 $d
     /tmp/ccBmS00B.s:1246   .bss.command_idx:00000000 command_idx
     /tmp/ccBmS00B.s:1253   .bss.command:00000000 command
     /tmp/ccBmS00B.s:1228   .bss.is_raw:00000000 is_raw
     /tmp/ccBmS00B.s:1260   .bss.input_buffer:00000000 input_buffer
     /tmp/ccBmS00B.s:1222   .bss.is_avg:00000000 is_avg
     /tmp/ccBmS00B.s:1216   .bss.is_rnd:00000000 is_rnd
     /tmp/ccBmS00B.s:593    .text.Error_Handler:00000000 $t
     /tmp/ccBmS00B.s:599    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccBmS00B.s:631    .text.MX_USART2_UART_Init:00000000 $t
     /tmp/ccBmS00B.s:636    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
     /tmp/ccBmS00B.s:690    .text.MX_USART2_UART_Init:0000002c $d
     /tmp/ccBmS00B.s:1288   .bss.huart2:00000000 huart2
     /tmp/ccBmS00B.s:696    .text.MX_ADC1_Init:00000000 $t
     /tmp/ccBmS00B.s:701    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/ccBmS00B.s:804    .text.MX_ADC1_Init:00000060 $d
     /tmp/ccBmS00B.s:1302   .bss.hadc1:00000000 hadc1
     /tmp/ccBmS00B.s:811    .text.SystemClock_Config:00000000 $t
     /tmp/ccBmS00B.s:817    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccBmS00B.s:964    .text.SystemClock_Config:0000009c $d
     /tmp/ccBmS00B.s:970    .rodata.main.str1.4:00000000 $d
     /tmp/ccBmS00B.s:977    .text.main:00000000 $t
     /tmp/ccBmS00B.s:983    .text.main:00000000 main
     /tmp/ccBmS00B.s:1198   .text.main:000000ec $d
     /tmp/ccBmS00B.s:1240   .bss.STATE:00000000 STATE
     /tmp/ccBmS00B.s:1274   .bss.Analog_Hall:00000000 Analog_Hall
     /tmp/ccBmS00B.s:1217   .bss.is_rnd:00000000 $d
     /tmp/ccBmS00B.s:1223   .bss.is_avg:00000000 $d
     /tmp/ccBmS00B.s:1229   .bss.is_raw:00000000 $d
     /tmp/ccBmS00B.s:1235   .bss.is_adc_ready:00000000 $d
     /tmp/ccBmS00B.s:1241   .bss.STATE:00000000 $d
     /tmp/ccBmS00B.s:1247   .bss.command_idx:00000000 $d
     /tmp/ccBmS00B.s:1250   .bss.command:00000000 $d
     /tmp/ccBmS00B.s:1257   .bss.input_buffer:00000000 $d
     /tmp/ccBmS00B.s:1264   .bss.Digital_Hall:00000000 $d
     /tmp/ccBmS00B.s:1271   .bss.Analog_Hall:00000000 $d
     /tmp/ccBmS00B.s:1281   .bss.hdma_usart2_tx:00000000 hdma_usart2_tx
     /tmp/ccBmS00B.s:1278   .bss.hdma_usart2_tx:00000000 $d
ARM GAS  /tmp/ccBmS00B.s 			page 55


     /tmp/ccBmS00B.s:1285   .bss.huart2:00000000 $d
     /tmp/ccBmS00B.s:1295   .bss.hdma_adc1:00000000 hdma_adc1
     /tmp/ccBmS00B.s:1292   .bss.hdma_adc1:00000000 $d
     /tmp/ccBmS00B.s:1299   .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_ReadPin
strcmp
HAL_UARTEx_ReceiveToIdle_IT
HAL_UART_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_ADC_Start_DMA
snprintf
HAL_Delay
strlen
HAL_UART_Transmit
